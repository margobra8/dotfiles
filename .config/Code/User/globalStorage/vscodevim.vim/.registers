[["%",{"text":"polybar/scripts/scroll_spotify_status.sh","registerMode":1}],["\"",{"text":" spotify","registerMode":1}],["#",{"text":"polybar/user_modules.ini","registerMode":1}],["-",{"text":" spotify","registerMode":1}],["0",{"text":"const favs = require(\"./cmds_favs.js\");","registerMode":2}],["1",{"text":"const { User, Quiz, Score } = require(\"./model.js\").models;","registerMode":2}],["2",{"text":"","registerMode":2}],["3",{"text":"  }","registerMode":2}],["4",{"text":"    /*\n      Add reverting commands here.\n      Return a promise to correctly handle asynchronicity.\n\n      Example:\n      return queryInterface.dropTable('users');\n    */","registerMode":2}],["5",{"text":"      {sync: {force: true}}s","registerMode":2}],["6",{"text":"    /*\n      Add altering commands here.\n      Return a promise to correctly handle asynchronicity.\n\n      Example:\n      return queryInterface.createTable('users', { id: Sequelize.INTEGER });\n    */","registerMode":2}],["7",{"text":"","registerMode":2}],["8",{"text":"  let answered = await rl.questionP(quiz.question);\n\n  if (answered.toLowerCase().trim() === quiz.answer.toLowerCase().trim()) {\n    rl.log(`  The answer \"${answered}\" is right!`);\n  } else {\n    rl.log(`  The answer \"${answered}\" is wrong!`);\n  }","registerMode":2}],["9",{"text":"  if (!quiz) throw new Error(`  Quiz '${id}' is not in DB`);","registerMode":2}],["/",{"text":"Score","registerMode":0}]]